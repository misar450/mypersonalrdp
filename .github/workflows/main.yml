name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure core RDP settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Type DWord -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Type DWord -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Type DWord -Value 0 -Force
          # Reattach to the already-primed session
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Type DWord -Value 1 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null

          Restart-Service -Name TermService -Force

      - name: Create RDP user
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $password   = $env:RDP_PASSWORD
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          if (-not (Get-LocalUser -Name "RDP")) { Write-Error "User creation failed"; exit 1 }

      - name: Install tools (WinSW + Goreman)
        run: |
          $ua = @{ "User-Agent"="curl/8.0" }
          New-Item -ItemType Directory -Force -Path "C:\tools\winsw","C:\tools\goreman","C:\persist\orchestrator","C:\persist\svc-logs" | Out-Null

          # WinSW (latest x64)
          $winswRel   = Invoke-RestMethod -Uri "https://api.github.com/repos/winsw/winsw/releases/latest" -Headers $ua
          $winswAsset = $winswRel.assets | Where-Object { $_.name -match "(?i)winsw.*x64\.exe$" } | Select-Object -First 1
          if (-not $winswAsset) { throw "WinSW x64 asset not found." }
          Invoke-WebRequest -Uri $winswAsset.browser_download_url -OutFile "C:\tools\winsw\winsw.exe"

          # Goreman (latest windows_amd64.zip) â€“ robust extraction
          $gRel   = Invoke-RestMethod -Uri "https://api.github.com/repos/mattn/goreman/releases/latest" -Headers $ua
          $gZip   = $gRel.assets | Where-Object { $_.name -match "(?i)windows_amd64\.zip$" } | Select-Object -First 1
          if (-not $gZip) { throw "Goreman windows_amd64.zip asset not found." }
          $tmpZip = "$env:TEMP\goreman.zip"
          $tmpDir = "$env:TEMP\goreman"
          if (Test-Path $tmpDir) { Remove-Item $tmpDir -Recurse -Force }
          Invoke-WebRequest -Uri $gZip.browser_download_url -OutFile $tmpZip
          Expand-Archive -Path $tmpZip -DestinationPath $tmpDir -Force

          $gExe = Get-ChildItem -Path $tmpDir -Recurse -Filter "goreman.exe" | Select-Object -First 1
          if (-not $gExe) { throw "goreman.exe not found inside the zip." }
          Copy-Item $gExe.FullName "C:\tools\goreman\goreman.exe" -Force

      - name: Register HKLM Run entries (Goreman + WinSW start)
        run: |
          $runKey = 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Run'
          if (-not (Test-Path $runKey)) { New-Item -Path $runKey -Force | Out-Null }

          # GUI apps via goreman (Procfile.gui)
          $gCmd = "`"C:\tools\goreman\goreman.exe`" -f `"C:\persist\orchestrator\Procfile.gui`" start"
          New-ItemProperty -Path $runKey -Name "GuiAppLauncher" -PropertyType String -Value $gCmd -Force | Out-Null

          # Start WinSW with services.yml on logon (we also have a Task Scheduler entry for RDP below)
          $wCmd = "`"C:\tools\winsw\winsw.exe`" start `"C:\persist\orchestrator\services.yml`""
          New-ItemProperty -Path $runKey -Name "WinSWStart" -PropertyType String -Value $wCmd -Force | Out-Null

      - name: Prime and keep active the RDP session
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          New-Item -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Force | Out-Null
          New-ItemProperty -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Name 'AuthenticationLevelOverride' -PropertyType DWord -Value 0 -Force | Out-Null
          $target = "TERMSRV/127.0.0.1"
          Start-Process "$env:SystemRoot\System32\cmdkey.exe" -ArgumentList @("/generic:$target","/user:RDP","/pass:$env:RDP_PASSWORD") -WindowStyle Hidden -Wait
          $mstsc = Join-Path $env:SystemRoot "System32\mstsc.exe"
          Start-Process -FilePath $mstsc -ArgumentList @("/v:127.0.0.1","/f") -WindowStyle Hidden
          Start-Sleep -Seconds 15
          Start-Process "$env:SystemRoot\System32\cmdkey.exe" -ArgumentList @("/delete:$target") -WindowStyle Hidden -Wait
          Write-Host "RDP session for user 'RDP' is active."

      - name: Create RDP Startup shortcut for Goreman and launch now
        run: |
          $startup = "C:\Users\RDP\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
          New-Item -ItemType Directory -Force -Path $startup | Out-Null

          $lnkPath = Join-Path $startup "Goreman (Procfile.gui).lnk"
          $ws = New-Object -ComObject WScript.Shell
          $s  = $ws.CreateShortcut($lnkPath)
          $s.TargetPath = "C:\tools\goreman\goreman.exe"
          $s.Arguments  = '-f "C:\persist\orchestrator\Procfile.gui" start'
          $s.WorkingDirectory = "C:\persist\orchestrator"
          $s.WindowStyle = 7
          $s.Save()

          if (Test-Path "C:\persist\orchestrator\Procfile.gui") {
            if (-not (Get-Process -Name "goreman" -ErrorAction SilentlyContinue)) {
              Start-Process -FilePath "C:\tools\goreman\goreman.exe" -ArgumentList @('-f','C:\persist\orchestrator\Procfile.gui','start') -WindowStyle Hidden
              Write-Host "Goreman launched now."
            } else {
              Write-Host "Goreman already running."
            }
          } else {
            Write-Host "Procfile.gui not found; Goreman will launch on next logon via Startup."
          }

      - name: Ensure WinSW log roll in services.yml
        run: |
          $cfg = "C:\persist\orchestrator\services.yml"
          if (-not (Test-Path $cfg)) { Write-Host "No services.yml found. Skipping log patch."; exit 0 }

          $content = Get-Content $cfg -Raw
          $changed = $false
          if ($content -notmatch '(^|\n)\s*logpath\s*:') {
            Add-Content -Path $cfg -Value "`nlogpath: `"C:\persist\svc-logs`"`n"
            $changed = $true
          }
          if ($content -notmatch '(^|\n)\s*log\s*:') {
            Add-Content -Path $cfg -Value "log:`n  mode: roll`n"
            $changed = $true
          }
          if ($changed) { Write-Host "services.yml patched to include logpath and log.mode=roll." } else { Write-Host "services.yml already has log settings." }

      - name: Install WinSW service (run as .\RDP; start will be triggered on logon)
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $cfg = "C:\persist\orchestrator\services.yml"
          $exe = "C:\tools\winsw\winsw.exe"
          if (-not (Test-Path $cfg)) { Write-Host "No services.yml at $cfg. Skipping WinSW."; exit 0 }
          & $exe uninstall $cfg | Out-Null 2>$null
          & $exe install  $cfg --username ".\RDP" --password "$env:RDP_PASSWORD"
          Write-Host "WinSW installed under .\RDP. Start will be triggered at logon."

      - name: Register Task Scheduler (start WinSW on RDP logon)
        run: |
          $taskName = "RDP_WinSWStart"
          $tr = 'cmd /c timeout 5 && "C:\tools\winsw\winsw.exe" start "C:\persist\orchestrator\services.yml"'
          schtasks /Delete /TN "$taskName" /F >NUL 2>&1
          schtasks /Create /TN "$taskName" /SC ONLOGON /RL HIGHEST /TR "$tr" /RU RDP /NP /F

      - name: Install Microsoft OpenJDK 21
        run: |
          winget source update
          winget install --id=Microsoft.OpenJDK.21 -e --accept-package-agreements --accept-source-agreements --silent --scope machine

      # --- Cloudflare R2 + rclone (temporarily disabled) ---
      # - name: Install rclone (non-interactive)
      #   run: |
      #     winget source update
      #     winget install --id=Rclone.Rclone -e --accept-package-agreements --accept-source-agreements --silent
      #
      # - name: Configure rclone remote (Cloudflare R2)
      #   env:
      #     CF_R2_ACCOUNT_ID: ${{ secrets.CF_R2_ACCOUNT_ID }}
      #     CF_R2_ACCESS_KEY_ID: ${{ secrets.CF_R2_ACCESS_KEY_ID }}
      #     CF_R2_ACCESS_KEY_SECRET: ${{ secrets.CF_R2_ACCESS_KEY_SECRET }}
      #   run: |
      #     rclone config create persist s3 provider Cloudflare access_key_id "$env:CF_R2_ACCESS_KEY_ID" secret_access_key "$env:CF_R2_ACCESS_KEY_SECRET" region auto endpoint "https://$env:CF_R2_ACCOUNT_ID.r2.cloudflarestorage.com" --non-interactive
      #     rclone config show persist | Out-Null
      #
      # - name: Pull persistent folder from Cloudflare R2
      #   env:
      #     CF_R2_BUCKET: ${{ secrets.CF_R2_BUCKET }}
      #     PERSIST_PREFIX: ${{ secrets:PERSIST_PREFIX }}
      #   run: |
      #     $persist = "C:\persist"
      #     if (-not $env:PERSIST_PREFIX) { $env:PERSIST_PREFIX = "persist" }
      #     New-Item -ItemType Directory -Force -Path $persist | Out-Null
      #     rclone mkdir "persist:$env:CF_R2_BUCKET/$env:PERSIST_PREFIX"
      #     rclone sync "persist:$env:CF_R2_BUCKET/$env:PERSIST_PREFIX" "$persist" --fast-list --checkers 16 --transfers 8
      # --- End Cloudflare R2 + rclone (temporarily disabled) ---

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i","`"$installerPath`"","/quiet","/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-$env:GITHUB_RUN_ID"
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 24) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned. Exiting."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Set MTU 1400 on Tailscale and verify
        run: |
          $iface = Get-NetIPInterface -InterfaceAlias "Tailscale" -ErrorAction SilentlyContinue
          if (-not $iface) { Write-Error "Interface 'Tailscale' not found."; exit 1 }
          netsh interface ipv4 set subinterface "Tailscale" mtu=1400 store=persistent > $null 2>&1
          netsh interface ipv6 set subinterface "Tailscale" mtu=1400 store=persistent > $null 2>&1
          $v4 = Get-NetIPInterface -InterfaceAlias "Tailscale" -AddressFamily IPv4
          $v6 = Get-NetIPInterface -InterfaceAlias "Tailscale" -AddressFamily IPv6
          Write-Host "Tailscale MTU IPv4: $($v4.NlMtu)"
          Write-Host "Tailscale MTU IPv6: $($v6.NlMtu)"
          if ($v4.NlMtu -ne 1400 -or $v6.NlMtu -ne 1400) { Write-Error "Unable to set MTU=1400 on 'Tailscale'."; exit 1 }
          Write-Host "MTU successfully set to 1400 on 'Tailscale' (IPv4 and IPv6)."

      - name: Verify RDP accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection to RDP port 3389 failed"; exit 1 }
          Write-Host "TCP connectivity successful!"

      - name: Maintain connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
