name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure core RDP settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force
          # Ensure a single session per user so RDP reconnects to the existing session
          New-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fSingleSessionPerUser' -PropertyType DWord -Value 1 -Force | Out-Null

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP user
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          # Use repository secret as password
          $password   = $env:RDP_PASSWORD
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Prime RDP user session locally
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          # Goal: create an interactive RDP session for user 'RDP' without reboot,
          # so when you connect over Tailscale you attach to the existing session.
          # Approach: save credentials for TERMSRV/127.0.0.1, relax client auth prompts,
          # then start mstsc to localhost hidden, wait, and close it.

          # Relax client certificate/auth prompts for mstsc
          New-Item -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Force | Out-Null
          New-ItemProperty -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Name 'AuthenticationLevelOverride' -PropertyType DWord -Value 0 -Force | Out-Null

          $target = "TERMSRV/127.0.0.1"
          $user   = "RDP"
          $pass   = $env:RDP_PASSWORD

          # Store credentials (hidden; not printed)
          Start-Process -FilePath "$env:SystemRoot\System32\cmdkey.exe" `
                        -ArgumentList @("/generic:$target","/user:$user","/pass:$pass") `
                        -WindowStyle Hidden -NoNewWindow -Wait

          # Launch mstsc to localhost in background (hidden window)
          $mstsc = Join-Path $env:SystemRoot "System32\mstsc.exe"
          Start-Process -FilePath $mstsc -ArgumentList @("/v:127.0.0.1") -WindowStyle Hidden

          # Give it a few seconds to complete the logon handshake, then close mstsc
          Start-Sleep -Seconds 12
          Get-Process mstsc -ErrorAction SilentlyContinue | Stop-Process -Force

          # Clean up stored credentials
          Start-Process -FilePath "$env:SystemRoot\System32\cmdkey.exe" `
                        -ArgumentList @("/delete:$target") `
                        -WindowStyle Hidden -NoNewWindow -Wait

          Write-Host "RDP session for user 'RDP' has been started locally."

      - name: Install Microsoft OpenJDK 21
        run: |
          # Update sources and install OpenJDK 21
          winget source update
          winget install --id=Microsoft.OpenJDK.21 -e --accept-package-agreements --accept-source-agreements --silent --scope machine

#      - name: Install rclone
#        run: |
#          # Install rclone via winget
#          winget source update
#          winget install --id=Rclone.Rclone -e --accept-package-agreements --accept-source-agreements --silent
#
#      - name: Configure rclone remote (Cloudflare R2)
#        env:
#          CF_R2_ACCOUNT_ID: ${{ secrets.CF_R2_ACCOUNT_ID }}
#          CF_R2_ACCESS_KEY_ID: ${{ secrets.CF_R2_ACCESS_KEY_ID }}
#          CF_R2_ACCESS_KEY_SECRET: ${{ secrets.CF_R2_ACCESS_KEY_SECRET }}
#        run: |
#          # Create rclone remote named 'persist' for Cloudflare R2 (S3-compatible)
#          rclone config create persist s3 provider Cloudflare access_key_id "$env:CF_R2_ACCESS_KEY_ID" secret_access_key "$env:CF_R2_ACCESS_KEY_SECRET" region auto endpoint "https://$env:CF_R2_ACCOUNT_ID.r2.cloudflarestorage.com" --non-interactive
#          rclone config show persist | Out-Null

      - name: Pull persistent folder from Cloudflare R2
        env:
          CF_R2_BUCKET: ${{ secrets.CF_R2_BUCKET }}
          PERSIST_PREFIX: ${{ secrets.PERSIST_PREFIX }}
        run: |
          # Sync from R2 -> C:\persist
          $persist = "C:\persist"
          if (-not $env:PERSIST_PREFIX) { $env:PERSIST_PREFIX = "persist" }
          New-Item -ItemType Directory -Force -Path $persist | Out-Null
          # Ensure destination exists on R2 (no-op if it already exists)
          rclone mkdir "persist:$env:CF_R2_BUCKET/$env:PERSIST_PREFIX"
          rclone sync "persist:$env:CF_R2_BUCKET/$env:PERSIST_PREFIX" "$persist" --fast-list --checkers 16 --transfers 8
          Write-Host "Persistent folder pulled to $persist."

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale connection
        run: |
          # Bring up Tailscale with the provided auth key
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Set MTU 1400 on Tailscale and verify
        run: |
          # Ensure the "Tailscale" interface exists before applying MTU
          $iface = Get-NetIPInterface -InterfaceAlias "Tailscale" -ErrorAction SilentlyContinue
          if (-not $iface) {
            Write-Error "Interface 'Tailscale' not found."
            exit 1
          }

          # Apply MTU via netsh (suppress 'Ok.' output)
          netsh interface ipv4 set subinterface "Tailscale" mtu=1400 store=persistent > $null 2>&1
          netsh interface ipv6 set subinterface "Tailscale" mtu=1400 store=persistent > $null 2>&1

          # Verify specific values on the Tailscale interface
          $v4 = Get-NetIPInterface -InterfaceAlias "Tailscale" -AddressFamily IPv4
          $v6 = Get-NetIPInterface -InterfaceAlias "Tailscale" -AddressFamily IPv6
          Write-Host "Tailscale MTU IPv4: $($v4.NlMtu)"
          Write-Host "Tailscale MTU IPv6: $($v6.NlMtu)"

          if ($v4.NlMtu -ne 1400 -or $v6.NlMtu -ne 1400) {
            Write-Error "Unable to set MTU=1400 on 'Tailscale'."
            exit 1
          }

          Write-Host "MTU successfully set to 1400 on 'Tailscale' (IPv4 and IPv6)."

      - name: Verify RDP accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Start background sync to Cloudflare R2
        env:
          CF_R2_BUCKET: ${{ secrets.CF_R2_BUCKET }}
          PERSIST_PREFIX: ${{ secrets.PERSIST_PREFIX }}
        run: |
          # Start a background process to periodically sync C:\persist -> R2 every 10 minutes
          $persist = "C:\persist"
          if (-not $env:PERSIST_PREFIX) { $env:PERSIST_PREFIX = "persist" }
          $cmd = "$persist\_r2sync.ps1"
          @"
          while ($true) {
            try {
              rclone sync `"$persist`" `"persist:$env:CF_R2_BUCKET/$env:PERSIST_PREFIX`" --fast-list --checkers 8 --transfers 4 | Out-File -FilePath `"$persist\_r2sync.log`" -Append
            } catch {
              "`$($_.Exception.Message)" | Out-File -FilePath `"$persist\_r2sync.log`" -Append
            }
            Start-Sleep -Seconds 600
          }
          "@ | Set-Content -Path $cmd -Encoding UTF8
          Start-Process -FilePath "$PSHOME\pwsh.exe" -ArgumentList @("-NoProfile","-ExecutionPolicy","Bypass","-File",$cmd) -WindowStyle Hidden
          Write-Host "Started background sync task for C:\persist."

      - name: Maintain connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
