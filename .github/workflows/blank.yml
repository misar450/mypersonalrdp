name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    env:
      RDP_USER: RDP
      # Global rclone config path so both the job and the service see the same file
      RCLONE_CONFIG: C:\tools\rclone\rclone.conf

    steps:
      - name: Configure core RDP settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Type DWord -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Type DWord -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Type DWord -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Type DWord -Value 1 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      - name: Install Microsoft OpenJDK 21
        run: |
          winget source update
          winget install --id=Microsoft.OpenJDK.21 -e --accept-package-agreements --accept-source-agreements --silent --scope machine

      - name: Install tools (WinSW v2 + Goreman)
        shell: pwsh
        run: |
          $ua = @{ "User-Agent"="curl/8.0" }
          New-Item -ItemType Directory -Force -Path "C:\tools\winsw","C:\tools\goreman" | Out-Null

          # WinSW v2.x (pick latest v2 release)
          $winswReleases = Invoke-RestMethod -Uri "https://api.github.com/repos/winsw/winsw/releases" -Headers $ua
          $winswRel = $winswReleases | Where-Object { $_.tag_name -match '^v2\.' } | Select-Object -First 1
          if (-not $winswRel) { throw "WinSW v2.x release not found." }
          $winswAsset = $winswRel.assets | Where-Object { $_.name -match "(?i)winsw.*x64\.exe$" } | Select-Object -First 1
          if (-not $winswAsset) { throw "WinSW v2 x64 asset not found." }
          Invoke-WebRequest -Uri $winswAsset.browser_download_url -OutFile "C:\tools\winsw\winsw.exe"

          # Goreman latest windows_amd64
          $gRel   = Invoke-RestMethod -Uri "https://api.github.com/repos/mattn/goreman/releases/latest" -Headers $ua
          $gZip   = $gRel.assets | Where-Object { $_.name -match "(?i)windows_amd64\.zip$" } | Select-Object -First 1
          if (-not $gZip) { throw "Goreman windows_amd64.zip asset not found." }
          $tmpZip = "$env:TEMP\goreman.zip"
          $tmpDir = "$env:TEMP\goreman"
          if (Test-Path $tmpDir) { Remove-Item $tmpDir -Recurse -Force }
          Invoke-WebRequest -Uri $gZip.browser_download_url -OutFile $tmpZip
          Expand-Archive -Path $tmpZip -DestinationPath $tmpDir -Force
          $gExe = Get-ChildItem -Path $tmpDir -Recurse -Filter "goreman.exe" | Select-Object -First 1
          if (-not $gExe) { throw "goreman.exe not found inside the zip." }
          Copy-Item $gExe.FullName "C:\tools\goreman\goreman.exe" -Force

      - name: Install Rclone (machine-wide)
        shell: pwsh
        run: |
          winget source update
          winget install --id=Rclone.Rclone -e --accept-package-agreements --accept-source-agreements --silent --scope machine

          # Prefer the machine-scope WinGet shim; then typical install dirs; last-resort the user-scope shim.
          $linkMachine = Join-Path $env:ProgramFiles "WinGet\Links\rclone.exe"
          $progFiles   = "C:\Program Files\rclone\rclone.exe"
          $progFiles86 = "C:\Program Files (x86)\rclone\rclone.exe"
          $linkUser    = Join-Path $env:LOCALAPPDATA "Microsoft\WinGet\Links\rclone.exe"

          $rcloneExe = @($linkMachine, $progFiles, $progFiles86, $linkUser) | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $rcloneExe) { throw "rclone.exe not found after installation." }

          # Use absolute path now
          & $rcloneExe version | Write-Host

          # Make rclone available to subsequent steps
          $pathsToAdd = @((Split-Path $rcloneExe))
          if (Test-Path $linkMachine) { $pathsToAdd += (Split-Path $linkMachine) }
          $pathsToAdd = $pathsToAdd | Select-Object -Unique
          $pathsToAdd | ForEach-Object { $_ | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }

      - name: Configure Rclone remote (Cloudflare R2)
        env:
          CF_R2_ACCOUNT_ID: ${{ secrets.CF_R2_ACCOUNT_ID }}
          CF_R2_ACCESS_KEY_ID: ${{ secrets.CF_R2_ACCESS_KEY_ID }}
          CF_R2_ACCESS_KEY_SECRET: ${{ secrets.CF_R2_ACCESS_KEY_SECRET }}
        run: |
          New-Item -ItemType Directory -Force -Path "C:\tools\rclone" | Out-Null
          rclone config create persist s3 `
            provider Cloudflare `
            access_key_id "$env:CF_R2_ACCESS_KEY_ID" `
            secret_access_key "$env:CF_R2_ACCESS_KEY_SECRET" `
            region auto `
            endpoint "https://$env:CF_R2_ACCOUNT_ID.r2.cloudflarestorage.com" `
            --non-interactive --config "$env:RCLONE_CONFIG"
          rclone config show persist --config "$env:RCLONE_CONFIG" | Out-Null

      - name: Install WinFsp for Rclone mounting
        run: |
          winget source update
          winget install --id=WinFsp.WinFsp -e --accept-package-agreements --accept-source-agreements --silent --scope machine

      - name: Set up Rclone mount as a background daemon service (WinSW v2)
        env:
          CF_R2_BUCKET: ${{ secrets.CF_R2_BUCKET }}
          PERSIST_PREFIX: ${{ secrets.PERSIST_PREFIX }}
        shell: pwsh
        run: |
          $mountDir   = "C:\tools\rclone-mount"
          $mountPoint = "C:\persist"

          # Only cache dir; do NOT create the mountpoint
          New-Item -ItemType Directory -Force -Path "$mountDir\cache" | Out-Null

          # Ensure mountpoint does NOT exist (WinFsp/rclone will fail if it does)
          if (Test-Path -LiteralPath $mountPoint) {
            $count = (Get-ChildItem -LiteralPath $mountPoint -Force -ErrorAction SilentlyContinue | Measure-Object).Count
            Write-Host "Mountpoint exists (items: $count). Removing to allow mount..."
            Remove-Item -LiteralPath $mountPoint -Recurse -Force
          }

          $remotePath = "persist:$($env:CF_R2_BUCKET)"
          if ($env:PERSIST_PREFIX) { $remotePath = "$remotePath/$($env:PERSIST_PREFIX)" }

          $globalRcloneConf = $env:RCLONE_CONFIG

          # Prefer a machine-visible path for the service
          $linkMachine = Join-Path $env:ProgramFiles "WinGet\Links\rclone.exe"
          $progFiles   = "C:\Program Files\rclone\rclone.exe"
          $progFiles86 = "C:\Program Files (x86)\rclone\rclone.exe"
          $rcloneExe = @($linkMachine, $progFiles, $progFiles86) | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $rcloneExe) {
            $cmd = Get-Command rclone.exe -ErrorAction SilentlyContinue
            if ($cmd) { $rcloneExe = $cmd.Source }
          }
          if (-not $rcloneExe) { throw "rclone.exe not found in a machine-visible location." }

          $rcloneArguments = "mount `"$remotePath`" $mountPoint --config `"$globalRcloneConf`" --vfs-cache-mode full --dir-cache-time 5m --cache-dir `"$mountDir\cache`" --network-mode --no-console --log-level INFO --log-file `"$mountDir\mount.log`""
          Write-Host "Generated Rclone Arguments: $rcloneArguments"

          # WinSW v2 config
          $winswConfig = @"
          <service>
            <id>rclone-persist-mount</id>
            <name>Rclone Persist Mount (R2 Daemon)</name>
            <description>Background daemon mounting Cloudflare R2 at $mountPoint</description>
            <executable>$rcloneExe</executable>
            <arguments>$rcloneArguments</arguments>
            <startmode>Automatic</startmode>
            <workingdirectory>$mountDir</workingdirectory>
            <onfailure action="restart" delay="10 sec" />
            <logpath>$mountDir</logpath>
            <log mode="append" />
          </service>
          "@
          $winswConfig | Out-File -FilePath "$mountDir\rclone-persist-mount.xml" -Encoding utf8 -Force
          Copy-Item "C:\tools\winsw\winsw.exe" "$mountDir\rclone-persist-mount.exe" -Force

          & "$mountDir\rclone-persist-mount.exe" install
          & "$mountDir\rclone-persist-mount.exe" start
          Write-Host "Waiting 10 seconds for the Rclone service to initialize..."
          Start-Sleep -Seconds 10

          $service = Get-Service -Name "rclone-persist-mount" -ErrorAction SilentlyContinue
          if (-not $service -or $service.Status -ne "Running") {
            Write-Host "Service failed. Dumping logs for debugging:"
            Get-Content "$mountDir\rclone-persist-mount.err.log" -ErrorAction SilentlyContinue
            Get-Content "$mountDir\rclone-persist-mount.out.log" -ErrorAction SilentlyContinue
            Get-Content "$mountDir\mount.log" -ErrorAction SilentlyContinue
            Write-Error "Failed to start Rclone mount service"
            exit 1
          }

          # Optional: ensure the orchestrator folder exists on the mounted remote
          New-Item -ItemType Directory -Force -Path "$mountPoint\orchestrator" | Out-Null

          Write-Host "Rclone mount daemon service started successfully."

      - name: Install Tailscale
        run: |
          winget source update
          winget install -e --id Tailscale.Tailscale --accept-package-agreements --accept-source-agreements --silent --scope machine --source winget

      - name: Establish Tailscale connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-$env:GITHUB_RUN_ID"
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 24) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned. Exiting."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Set MTU 1400 on Tailscale and verify
        run: |
          $iface = Get-NetIPInterface -InterfaceAlias "Tailscale" -ErrorAction SilentlyContinue
          if (-not $iface) { Write-Error "Interface 'Tailscale' not found."; exit 1 }
          netsh interface ipv4 set subinterface "Tailscale" mtu=1400 store=persistent > $null 2>&1
          netsh interface ipv6 set subinterface "Tailscale" mtu=1400 store=persistent > $null 2>&1
          $v4 = Get-NetIPInterface -InterfaceAlias "Tailscale" -AddressFamily IPv4
          $v6 = Get-NetIPInterface -InterfaceAlias "Tailscale" -AddressFamily IPv6
          Write-Host "Tailscale MTU IPv4: $($v4.NlMtu)"
          Write-Host "Tailscale MTU IPv6: $($v6.NlMtu)"
          if ($v4.NlMtu -ne 1400 -or $v6.NlMtu -ne 1400) { Write-Error "Unable to set MTU=1400 on 'Tailscale'."; exit 1 }
          Write-Host "MTU successfully set to 1400 on 'Tailscale' (IPv4 and IPv6)."

      - name: "Create local user (${{ env.RDP_USER }})"
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $u = "$env:RDP_USER"
          $p = ConvertTo-SecureString $env:RDP_PASSWORD -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $p -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member $u -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u -ErrorAction SilentlyContinue
          echo "RDP_CREDS=User: $u | Password: $env:RDP_PASSWORD" >> $env:GITHUB_ENV

      - name: "Place Startup shortcuts for ${{ env.RDP_USER }} via Default profile"
        run: |
          $startupDefault = "C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
          New-Item -ItemType Directory -Force -Path $startupDefault | Out-Null
          $ws = New-Object -ComObject WScript.Shell
          $lnk1 = $ws.CreateShortcut((Join-Path $startupDefault "Goreman (Procfile.gui).lnk"))
          $lnk1.TargetPath = "C:\tools\goreman\goreman.exe"
          $lnk1.Arguments  = '-f "C:\persist\orchestrator\Procfile.gui" start'
          $lnk1.WorkingDirectory = "C:\persist\orchestrator"
          $lnk1.WindowStyle = 7
          $lnk1.Save()
          $lnk2 = $ws.CreateShortcut((Join-Path $startupDefault "WinSW (services.yml).lnk"))
          $lnk2.TargetPath = "C:\tools\winsw\winsw.exe"
          $lnk2.Arguments  = 'run "C:\persist\orchestrator\services.yml"'
          $lnk2.WorkingDirectory = "C:\persist\orchestrator"
          $lnk2.WindowStyle = 7
          $lnk2.Save()

      - name: "Prime and keep active the ${{ env.RDP_USER }} session"
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          New-Item -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Force | Out-Null
          New-ItemProperty -Path 'HKCU:\Software\Microsoft\Terminal Server Client' -Name 'AuthenticationLevelOverride' -PropertyType DWord -Value 0 -Force | Out-Null
          $target = "TERMSRV/127.0.0.1"
          Start-Process "$env:SystemRoot\System32\cmdkey.exe" -ArgumentList @("/generic:$target","/user:$env:RDP_USER","/pass:$env:RDP_PASSWORD") -WindowStyle Hidden -Wait
          $mstsc = Join-Path $env:SystemRoot "System32\mstsc.exe"
          Start-Process -FilePath $mstsc -ArgumentList @("/v:127.0.0.1","/f") -WindowStyle Hidden
          Start-Sleep -Seconds 15
          Start-Process "$env:SystemRoot\System32\cmdkey.exe" -ArgumentList @("/delete:$target") -WindowStyle Hidden -Wait
          Write-Host "RDP session for user '$env:RDP_USER' is active."

      - name: Verify RDP accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection to RDP port 3389 failed"; exit 1 }
          Write-Host "TCP connectivity successful!"

      - name: Maintain connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
